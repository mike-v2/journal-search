datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  starredEntries StarredEntry[]
  readEntries   ReadEntry[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JournalEntry {
  id        String         @id @default(cuid())
  date      DateTime       @unique
  startPage String
  endPage   String
  content   String
  starredBy StarredEntry[]
  readBy    ReadEntry[]
  topics    JournalTopic[]
  posts     Post[]
}

model StarredEntry {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId String
  createdAt      DateTime     @default(now())

  @@id([userId, journalEntryId])
}

model JournalTopic {
  id              String         @id @default(cuid())
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId  String
  name            String
  summary         String
  text            String      @default("")
  people          String[]    
  places          String[]
  organizations   String[]
  things          String[]
  emotion         String
  mood            String
  strength        Float
}

model Comment {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  post           Post         @relation(fields: [postId], references: [id])
  postId         String
  createdAt      DateTime     @default(now())
  text           String
}

model Post {
  id             String       @id @default(cuid())
  createdBy      User         @relation(fields: [creatorId], references: [id])
  creatorId      String
  createdAt      DateTime     @default(now())
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId String
  title          String       @default("")
  text           String
  comments       Comment[]
}

model ReadEntry {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id])
  journalEntryId String
  createdAt      DateTime     @default(now())

  @@id([userId, journalEntryId])
} 